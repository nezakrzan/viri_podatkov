# stevilo simulacij
st.simulacij = 10^5
# mu
mu = rep(10,4)
# velikost vzorca
n = c(3,4,5,10,30,100,1000)
# stevilo simulacij
st.simulacij = 10^5
# mu
mu = rep(2,4)
# preverjanje velikosti
temp=NULL
for(velikost in n){
rez = velikost.testa(velikost, st.simulacij, mu)
# chi^2 s 3 stopinjami prostosti(4-1)
temp= c(temp,sum(pchisq(rez,df=3,lower.tail = F)<0.05)/st.simulacij)
}
o
plot(n,temp)
plot(n,temp, xlab="velikost vzorca", ylab="velikost testa")
plot(n,temp, xlab="p-vrednost", ylab="velikost testa",
main="p-vrednosti v odvisnosti od velikosti vzorca")
dump("temp", "temp.R")
temp = source("temp.R")$value
plot(n,temp, xlab="p-vrednost", ylab="velikost testa",
main="p-vrednosti v odvisnosti od velikosti vzorca")
rez
temp
plot(n,temp, xlab="velikost vzorca", ylab="p-vrednost",
main="p-vrednosti v odvisnosti od velikosti vzorca")
# velikost vzorca
n = c(2,3,4,5,10,15,20,25,30,35,40, 45,50,55, 60,65,70,75,80,85,90,95,100)
# stevilo simulacij
st.simulacij = 10^5
# mu
mu = rep(2,4)
# velikost vzorca
n = c(2,3,4,5,10,15,20,25,30,35,40, 45,50,55, 60,65,70,75,80,85,90,95,100)
# stevilo simulacij
st.simulacij = 10^5
# mu
mu = rep(2,4)
# preverjanje velikosti
temp.majhni.vzorci=NULL
for(velikost in n){
rez = velikost.testa(velikost, st.simulacij, mu)
# chi^2 s 3 stopinjami prostosti(4-1)
temp.majhni.vzorci= c(temp.majhni.vzorci,
sum(pchisq(rez,df=3,lower.tail = F)<0.05)/st.simulacij)
}
dump("temp.majhni.vzorci", "temp.majhni.vzorci.R")
temp = source("temp.majhni.vzorci.R")$value
plot(n,temp.majhni.vzorci, xlab="velikost vzorca", ylab="p-vrednost",
main="p-vrednosti v odvisnosti od velikosti vzorca")
#dump("temp.majhni.vzorci", "temp.majhni.vzorci.R")
temp.majhni.vzorci = source("temp.majhni.vzorci.R")$value
plot(n,temp.majhni.vzorci, xlab="velikost vzorca", ylab="p-vrednost",
main="p-vrednosti v odvisnosti od velikosti vzorca")
set.seed(2024)
velikost.testa = function(n, st.simulacij, mu){
# vektor za rezultate
rez = NULL
for(i in 1:st.simulacij){
# naredim prazno matriko za X
X = matrix(nrow = n, ncol = 4)
# zapolnim matriko
X[,1] = rnorm(n=n, mean=mu[1], sd=1)
X[,2] = rnorm(n=n, mean=mu[2], sd=1)
X[,3] = rnorm(n=n, mean=mu[3], sd=1)
X[,4] = rnorm(n=n, mean=mu[4], sd=1)
# izracun mu
mu.0 = 1/(4*n)*sum(X)
mu.1 = 1/n*sum(X[,1])
mu.2 = 1/n*sum(X[,2])
mu.3 = 1/n*sum(X[,3])
mu.4 = 1/n*sum(X[,4])
# posplošeno razmerje verjetij oz.racunam log(lambda)
stevec = -1/2*(sum((X[,1]-mu.1)^2) + sum((X[,2]-mu.2)^2) +
sum((X[,3]-mu.3)^2) + sum((X[,4]-mu.4)^2))
imenovalec = -1/2*(sum((X-mu.0)^2))
log.lambda = 2*(stevec - imenovalec)
rez = c(rez,log.lambda)
}
return(rez)
}
# velikost vzorca
n = c(3,4,5,10,30,100,1000)
# stevilo simulacij
st.simulacij = 10^5
# mu
mu = rep(2,4)
# preverjanje velikosti
temp=NULL
for(velikost in n){
rez = velikost.testa(velikost, st.simulacij, mu)
# chi^2 s 3 stopinjami prostosti(4-1)
# pogledamo ali je p-vrednost testne stat. manjsa od 0.05
temp= c(temp,sum(pchisq(rez,df=3,lower.tail = F)<0.05)/st.simulacij)
}
dump("temp", "temp.R")
temp = source("temp.R")$value
plot(n,temp, xlab="velikost vzorca", ylab="p-vrednost",
main="p-vrednosti v odvisnosti od velikosti vzorca")
set.seed(2024)
# velikost vzorca
n = c(2,3,4,5,10,15,20,25,30,35,40, 45,50,55, 60,65,70,75,80,85,90,95,100)
# stevilo simulacij
st.simulacij = 10^5
# mu
mu = rep(2,4)
# preverjanje velikosti
temp.majhni.vzorci=NULL
for(velikost in n){
rez = velikost.testa(velikost, st.simulacij, mu)
# chi^2 s 3 stopinjami prostosti(4-1)
# pogledamo ali je p-vrednost testne stat. manjsa od 0.05
temp.majhni.vzorci= c(temp.majhni.vzorci,
sum(pchisq(rez,df=3,lower.tail = F)<0.05)/st.simulacij)
}
knitr::opts_chunk$set(
echo = FALSE,
fig.align = "center",
fig.pos = "H",
message = FALSE,
warning = FALSE,
results = F, fig.height = 4, fig.width = 5
)
library(haven)
library(psych)
library(ggplot2)
library(reshape2)
library(dplyr)
library(kableExtra)
library(blockmodeling)
set.seed(2024)
scree(podatki)
knitr::opts_chunk$set(
echo = FALSE,
fig.align = "center",
fig.pos = "H",
message = FALSE,
warning = FALSE,
results = F, fig.height = 4, fig.width = 5
)
library(haven)
library(psych)
library(ggplot2)
library(reshape2)
library(dplyr)
library(kableExtra)
library(blockmodeling)
set.seed(2024)
# vsi podatki
dataframe <- read_sav("dn3_big5.sav")
# samo najni stolpci
stolpci = c("EXT1","EXT2","EXT3","EXT4","EXT5","EXT6","EXT7","EXT8","EXT9","EXT10",
"EST1","EST2","EST3","EST4","EST5","EST6","EST7","EST8","EST9","EST10")
# najni podatki
podatki = dataframe[dataframe$country == "FR", stolpci]
n_prej = nrow(podatki) # stevilo vrstic pred odstranitvijo NA
podatki = na.omit(podatki) # odstranjene vrstice, ki vsebujejo NA
razlika = n_prej - nrow(podatki) # stevilo odtrajenih vrstic
negativne = c("EXT2", "EXT4", "EXT6", "EXT8", "EXT10",
"EST1", "EST3", "EST5", "EST6", "EST7", "EST8", "EST9", "EST10")
# negativne = c("EXT2", "EXT4", "EXT6", "EXT8", "EXT10",
#               "EST2", "EST4")
for(el in negativne){
podatki[[el]] = -1*podatki[[el]]
}
stat = data.frame(spremenljivke = c("EXT1", "EXT2", "EXT3", "EXT4", "EXT5", "EXT6", "EXT7", "EXT8", "EXT9", "EXT10", "EST1", "EST2", "EST3", "EST4", "EST5", "EST6", "EST7", "EST8", "EST9", "EST10"),
mean = c(2.48,-2.972,3.055,-3.242,3.118,-2.469, 2.679 ,-3.414 ,2.944,-3.688 ,-3.325
,3.061,-3.862,2.804,-3.182,-2.913,-3.107,-2.884,-3.015,-3.122),
Min = c(1.000,-5.000,1.000,-5.000,1.000,-5.000,1.000,-5.000,1.000,-5.000,-5.000,1.000,
-5.000,1.000,-5.000,-5.000,-5.000,-5.000, -5.000, -5.000),
Max = c(5.000,-1.000,5.000,-1.000,5.000,-1.000 ,5.000,-1.000,5.000,-1.000,-1.000,5.000,
-1.000,5.000,-1.000,-1.000,-1.000,-1.000,-1.000,-1.000))
kable(stat,
caption="Opisne statistike za števillske spremenljivke v podatkovnem okviru.") %>%
kable_styling(full_width=F, latex_options="hold_position")
# Korelacijska matrika stvilsko
Rlik <- cor(podatki)
# lowerMat(R=Rlik)
# kable(Rlik,
#       caption="Korelacijska matrika.") %>%
#   kable_styling(full_width=F, latex_options="hold_position")
# morda bolje, ker tale matrika ne pride okej v pdf?
library(corrplot)
colors10 <- colorRampPalette(c("#0000aa","white","#aa0000"))(10)
corrplot.mixed(cor(podatki,
method = "pearson"),
lower.col = colors10, upper.col = colors10,
tl.col="black", tl.cex = 0.5, number.cex = 0.5)
int <- c(-1, -0.5, -0.3, -0.1, 0.1, 0.3, 0.5, 1)
nint <- length(int) - 1
legint <- c("neg", "srednje", "sibko", "zanemarljivo", "sibko", "srednje", "poz")
heatmap(x=Rlik, Rowv=NA, symm=T, revC=T, margins=c(8, 8),
col=hcl.colors(n=nint, palette="Blue-Red 3", rev=T), breaks=int)
legend(x="topleft", legend=legint,
fill=hcl.colors(n=nint, palette="Blue-Red 3", rev=T), inset=c(0.75, 0), xpd=T)
cortest = cortest.bartlett(R=Rlik, n=nrow(podatki))
# KMO(Rlik)
round(KMO(Rlik)$MSAi,2)
mgk <- princomp(x=podatki, cor=T, scores=T)
plot(mgk, type="lines", ylim=c(0, 6), main="MGK")
# lastne vrednosti
eig <- eigen(x=Rlik, symmetric=T, only.values=T)$values
# round(cbind(eig, mgk$sdev^2, mgk$sdev),4)
# sum(eig)
kable(round(cbind(eig, mgk$sdev^2, mgk$sdev),4), caption="Izbira glavnih komponent na podlagi lastnih vrednosti.",
col.names = c("št. komponent", "lastna vrednost", "varianca", "standardni odklon")) %>%
kable_styling(full_width=F, latex_options="hold_position")
# paralelna analiza
fa.parallel(x=Rlik, n.obs=nrow(podatki), fm="minres", fa="pc")
loadings.orig <- mgk$loadings[,1:2]
loadings.res <- loadings.orig %*% diag(sqrt(eig[1:2]))
utezi = data.frame(comp1n = loadings.orig[,1], comp2n = loadings.orig[,2],
comp1r = loadings.res[,1], comp2r = loadings.res[,2])
kable(utezi, caption="Prikaz uteži glavnih komponen.",
col.names = c("Comp.1", "Comp.2", "Comp.1", "Comp.2")) %>%
add_header_above(header = c(" " = 1, "Nereskalirane uteži" = 2, "Reskalirane uteži" = 2)) %>%
kable_styling(full_width=F, latex_options="hold_position")
# delez pojasnjene variabilnosti GK
# celotna variabilnost (koliko prispeva vsaka komponenta)
skupna_var = eig/sum(eig)
prvi_dve = round(sum(skupna_var[1:2]),3)
za_vse = round(rowSums(loadings.res**2) ,2)
matplot(x=seq_along(stolpci), y=loadings.res, type="o", pch=16,
xlab="Sklop 1 - Sklop 2", ylab="Korelacije", ylim=c(-1, 1), las=1)
legend("bottomleft", legend=c("GK1", "GK2"), col=1:2, pch=16)
abline(h=0, v=10.5)
int <- c(-1, -0.4, -0.2, 0.2, 0.4, 1)
nint <- length(int) - 1
legint <- c("neg", "problem", "zanemarljivo", "problem", "poz")
heatmap(x=loadings.res, Rowv=NA, Colv=NA, revC=T, scale="none", margins=c(5, 13),
cexCol=1, labCol=c("GK1", "GK2"),
col=hcl.colors(n=nint, palette="Blue-Red 3", rev=T), breaks=int)
legend(x="topleft", legend=legint, fill=hcl.colors(n=nint, palette="Blue-Red 3", rev=T),
inset=c(0.65, 0), xpd=T)
fa.parallel(x = Rlik, n.obs = nrow(podatki), fa = "fa", fm = "minres")
scree(podatki)
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'H', fig.align="center", echo=FALSE, results = F)
library(cluster)
library(mclust)
library(foreign)
library(psych)
set.seed(2020)
data = read.table("data.txt", header = T, sep = "", dec = ".")
setwd("~/Documents/GitHub/viri_podatkov/multivariatna_analiza/01_dn")
knitr::opts_chunk$set(echo = TRUE, fig.pos = 'H', fig.align="center", echo=FALSE, results = F)
library(cluster)
library(mclust)
library(foreign)
library(psych)
set.seed(2020)
data = read.table("data.txt", header = T, sep = "", dec = ".")
str(data)
nrow(data)
colnames(data)
knitr::include_graphics("ban.png")
# preimenovanje stolpcev
colnames(data) <- c('dolzina','levi.rob','desni.rob', 'spodnji.rob', 'zgornji.rob', 'diagonala', 'tip')
# nastavim stolpec kot faktor
data$tip <- as.factor(data$tip)
levels(data$tip)
# prevedem v slovenščino
levels(data$tip) <- c("ponarejen bankovec", "pravi bankovec")
levels(data$tip)
library(vtable)
#napovedne spremenljivke
pred <- c('dolzina','levi.rob','desni.rob', 'spodnji.rob', 'zgornji.rob', 'diagonala')
#sumtable(data[,pred], add.median = T, digits = 1,
#         title = "Opisne statistike za števillske spremenljivke v podatkovnem okviru Swiss banknotes data.", #simple.kable = T, out = 'kable', fit.page = "\textwidth")
stat = data.frame(spremenljivke = c("dolzina", "levi.rob", "desni.rob", "spodnji.rob", "zgornji.rob", "diagonala"),
N = c(rep(200,6)),
mean = c(215, 130, 130, 9, 11, 140),
Std.Dev. = c(0.4, 0.4, 0.4, 1, 0.8, 1),
Min = c(214, 129, 129, 7, 8, 138),
Pctl.25 = c(215, 130, 130, 8, 10, 140),
Pctl.50 = c(215, 130, 130, 9, 11, 140),
Pctl.75 = c(215, 130, 130, 11, 11, 142),
Max = c(216,131,131,13,12,142))
kable(stat,
caption="Opisne statistike za števillske spremenljivke v podatkovnem okviru Swiss banknotes data.") %>%
kable_styling(full_width=F, latex_options="hold_position")
# skaliranje podatkov
# vprasanje: misls da skalirava tud diagonalo k jo uporabva za analizo?, zdej ni skalirana
# odgovor: sva skalirala samo spremenljivke za razvrscanje
dfz <- scale(x=data[1:5])
# matrika razliznosti na standardiziranih podatkih (Evklidska razdalja)
dz <- dist(x=dfz, method="euclidean")
hc.ward <- hclust(d=dz, method="ward.D2")
oldpar <- par(las=1, mfrow=c(1, 3))
barplot(hc.ward$height)
barplot(tail(x=hc.ward$height, n=10), names.arg=rev(seq_len(10)))
plot(hc.ward, labels=F, hang=-1, main="Ward", sub="", xlab="", ylab="")
par(oldpar)
# uporabili smo Evklidsko razdaljo
hc.sin <- hclust(d=dz, method="single")
oldpar <- par(las=1, mfrow=c(1, 3))
barplot(hc.sin$height)
barplot(tail(x=hc.sin$height, n=10), names.arg=rev(seq_len(10)))
plot(hc.sin, labels=F, hang=-1, main="Single", sub="", xlab="", ylab="")
par(oldpar)
# uporabili smo Evklidsko razdaljo
hc.com <- hclust(d=dz, method="complete")
oldpar <- par(las=1, mfrow=c(1, 3))
barplot(hc.com$height)
barplot(tail(x=hc.com$height, n=10), names.arg=rev(seq_len(10)))
plot(hc.com, labels=F, hang=-1, main="Complete", sub="", xlab="", ylab="")
par(oldpar)
# Ward skupine
hc.ward1 <- cutree(tree=hc.ward, k=1)
hc.ward2 <- cutree(tree=hc.ward, k=2)
hc.ward3 <- cutree(tree=hc.ward, k=3)
hc.ward4 <- cutree(tree=hc.ward, k=4)
ime = c('dolzina','levi.rob','desni.rob', 'spodnji.rob', 'zgornji.rob')
oldpar <- par(las=1, mfrow=c(1, 3))
nsk <- 2
sk <- hc.ward2
sk.ime <- paste("sk", 1:nsk, sep="")
agr <- aggregate(x=dfz, by=list(sk), FUN=mean)
y <- t(agr[, -1])
matplot(x=seq_along(ime), y=y, type="o", pch=16, ylim=c(-2, 2), xlab="",
ylab="ovprecje (standardizirane spremenljivke)")
axis(side=1, at=seq_along(ime), labels=ime, las=2)
legend("bottomleft", legend=sk.ime, col=1:nsk, pch=16)
abline(h=0, v=6.5)
nsk <- 3
sk <- hc.ward3
sk.ime <- paste("sk", 1:nsk, sep="")
agr <- aggregate(x=dfz, by=list(sk), FUN=mean)
y <- t(agr[, -1])
matplot(x=seq_along(ime), y=y, type="o", pch=16, ylim=c(-2, 2), xlab="",
ylab="")
axis(side=1, at=seq_along(ime), labels=ime, las=2)
legend("bottomleft", legend=sk.ime, col=1:nsk, pch=16)
abline(h=0, v=6.5)
nsk <- 4
sk <- hc.ward4
sk.ime <- paste("sk", 1:nsk, sep="")
agr <- aggregate(x=dfz, by=list(sk), FUN=mean)
y <- t(agr[, -1])
matplot(x=seq_along(ime), y=y, type="o", pch=16, ylim=c(-2, 2), xlab="",
ylab="")
axis(side=1, at=seq_along(ime), labels=ime, las=2)
legend("bottomleft", legend=sk.ime, col=1:nsk, pch=16)
abline(h=0, v=6.5)
par(oldpar)
# WSS
kmax <- 10
wss <- NULL
for (k in 1:kmax) {
withinss <- kmeans(x=dfz, # podatki
centers=k, # st. skupin
nstart=100)$tot.withinss # st. ponovitev
wss <- c(wss, withinss)
}
plot(x=1:kmax, y=wss, type="b", main="", xlab="stevilo skupin(k)",
ylab="vrednost Wardowe kriterijske funkcije")
# gap statistika
gap_stat <- clusGap(x=dfz, FUNcluster=kmeans, K.max=kmax)
plot(gap_stat, xlab="stevilo skupin", ylim=c(0.42,0.57), main="")
# Pseudo F (Calinski and Harabasz index)
pseudoF <- 0
bss <- wss[1] - wss
for (k in 2:kmax) pseudoF <- c(pseudoF, (bss[k]/(k-1)) / (wss[k]/(nrow(dfz)-k)))
plot(x=1:kmax, y=pseudoF, type="b", xlab="stevilo skupin",
ylab="Pseudo F", main="")
km1 <- kmeans(x=dfz, centers=1, nstart=1)
km2 <- kmeans(x=dfz, centers=2, nstart=100)
km3 <- kmeans(x=dfz, centers=3, nstart=100)
km4 <- kmeans(x=dfz, centers=4, nstart=100)
# Wardova kriterijska funkcija
WardKF <- function(data, cluster){
# vsota kvadratov
# x = ena spremenljivka
ss <- function(x) sum((x-mean(x))^2)
# vsota kvadratov znotraj ene skupine po vseh spremenljivkah
# X = matrika, stolpci so spremenljivke
withinss <- function(X) sum(apply(X=X, MARGIN=2, FUN=ss))
# vsota kvadratov vseh skupin
sum(by(data=data, INDICES=cluster, FUN=withinss))
}
wkf <- NULL
wkf <- rbind(wkf, c(WardKF(dfz, hc.ward1), WardKF(dfz, hc.ward2), WardKF(dfz, hc.ward3), WardKF(dfz, hc.ward4)))
wkf <- rbind(wkf, c(WardKF(dfz, km1$cluster), WardKF(dfz, km2$cluster), WardKF(dfz, km3$cluster), WardKF(dfz, km4$cluster)))
rownames(wkf) <- c("Ward", "Kmeans")
colnames(wkf) <- c("k=1", "k=2", "k=3", "k=4")
kable(wkf, caption = "Primerjava vrednosti kriterijske funkcije za Wardowo metodo in K-means.") %>%
kable_styling(full_width=F, latex_options="hold_position")
# kontingenčna tabela
#table(km4$cluster, c(3, 2, 4, 1)[hc.ward4])
kable(table(km3$cluster, c(2,3,1)[hc.ward3]), caption = "Kontingenčna tabela.") %>%
kable_styling(full_width=F, latex_options="hold_position")
# popravljen Randov indeks
r = adjustedRandIndex(x=km3$cluster, y=hc.ward3)
oldpar <- par(las=1, mfrow=c(2, 3))
for (i in seq_along(ime)) {
hist(data[, ime[i]],
main=ime[i],
xlab="",
ylab="Frekvenca")
}
par(oldpar)
df = data[1:5]
mc <- Mclust(data=df, G=1:5)
summary(mc)
plot(x=mc, what="BIC", xlab="stevilo skupin")
# priorControl
mcP <- Mclust(data=df, G=1:5, prior = priorControl())
summary(mcP)
plot(mcP, what = "BIC", xlab="stevilo skupin")
mc <- Mclust(data=dfz, G=1:5)
summary(mc)
plot(x=mc, what="BIC", xlab="stevilo skupin")
# priorControl
mcP <- Mclust(data=dfz, G=1:5, prior = priorControl())
summary(mcP)
plot(mcP, what = "BIC", xlab="stevilo skupin")
# nestandardizirani
mcSEL <- Mclust(data=df, G=1:5, modelNames = c("VEE", "EEE"))
# modela na treh skupinah
mcVEE <- Mclust(data=df, G = 3, modelNames = "VEE")
mcEEE <- Mclust(data=df, G = 3, modelNames = "EEE")
# standardizirani
mcSEL.s <- Mclust(data=dfz, G=1:5, modelNames = c("VEE", "EEE"))
# modela na treh skupinah
mcVEE.s <- Mclust(data=dfz, G = 3, modelNames = "VEE")
mcEEE.s <- Mclust(data=dfz, G = 3, modelNames = "EEE")
oldpar <- par(las=1, mfrow=c(1, 2))
plot(mcSEL, what="BIC", legendArgs = list(x = "bottomright"), xlab="stevilo skupin", main="Nestandardizirani podatki")
plot(mcSEL.s, what="BIC", legendArgs = list(x = "bottomright"), xlab="stevilo skupin", main="Standardizirani podatki")
par(oldpar)
# tukej sm dal stevilo skupin na n=3 k so tud boljsi rezultati
oldpar <- par(las=1, mfrow=c(1, 3))
nsk <- 3
sk <- km3$cluster
sk.ime <- paste("sk", 1:nsk, sep="")
agr <- aggregate(x=dfz, by=list(sk), FUN=mean)
y <- t(agr[, -1])
matplot(x=seq_along(ime), y=y, type="o", pch=16, ylim=c(-2, 2), xlab="",
xaxt="n", ylab="povprecje (standardizirane spremenljivke)", main = "k-means")
axis(side=1, at=seq_along(ime), labels=ime, las=2)
legend("bottomleft", legend=sk.ime, col=1:nsk, pch=16)
abline(h=0, v=6.5)
nsk <- 3
sk <- hc.ward3
sk.ime <- paste("sk", 1:nsk, sep="")
agr <- aggregate(x=dfz, by=list(sk), FUN=mean)
y <- t(agr[, -1])
matplot(x=seq_along(ime), y=y, type="o", pch=16, ylim=c(-2, 2), xlab="",
xaxt="n", ylab="", main = "Ward")
axis(side=1, at=seq_along(ime), labels=ime, las=2)
legend("bottomleft", legend=sk.ime, col=1:nsk, pch=16)
abline(h=0, v=6.5)
nsk <- 3
sk <- mcVEE.s$classification
sk.ime <- paste("sk", 1:nsk, sep="")
agr <- aggregate(x=dfz, by=list(sk), FUN=mean)
y <- t(agr[, -1])
matplot(x=seq_along(ime), y=y, type="o", pch=16, ylim=c(-2, 2), xlab="",
xaxt="n", ylab="", main = "VEE(BIC)")
axis(side=1, at=seq_along(ime), labels=ime, las=2)
legend("bottomleft", legend=sk.ime, col=1:nsk, pch=16)
abline(h=0, v=6.5)
par(oldpar)
wkf <- NULL
wkf <- rbind(wkf, c(WardKF(dfz, km3$cluster), WardKF(dfz, hc.ward3)))
colnames(wkf) <- c("k-means", "Ward")
kable(wkf, caption = "Primerjava vrednosti Wardove kriterijske funkcije za vse metodi k-means in Ward.") %>%
kable_styling(full_width=F, latex_options="hold_position")
# kako podobni sta si razvrstitvi; popravljen randov indeks
r = data.frame( wk = round(adjustedRandIndex(hc.ward3, km3$cluster),3), # ward in k-means
wv = round(adjustedRandIndex(hc.ward3, mcVEE.s$classification),3), #ward in VEE
kv = round(adjustedRandIndex(km3$cluster, mcVEE.s$classification),3)) # k-means in Vee
colnames(r) <- c("Ward in k-means", "Ward in VEE(BIC)", "k-means in VEE(BIC)")
kable(r, caption = "Primerjava popravljenega Randovega indeksa.") %>%
kable_styling(full_width=F, latex_options="hold_position")
# dodamo skupine v podatke
nsk = 3
sk.k = km3$cluster
sk.w = hc.ward3
sk.v = mcVEE.s$classification
sk.k.ime = paste("sk", 1:nsk, sep="")
sk.w.ime = paste("sk", 1:nsk, sep="")
sk.v.ime = paste("sk", 1:nsk, sep="")
data$cluster.k = sk.k
data$cluster.w = sk.w
data$cluster.v = sk.v
data$skupina.k = factor(x=sk.k, labels=sk.k.ime)
data$skupina.w = factor(x=sk.w, labels=sk.w.ime)
data$skupina.v = factor(x=sk.v, labels=sk.v.ime)
# velikost skupin
kable(table(data$skupina.k), caption = "Velikost skupin pri metodi k -means.",
col.names= c("skupina", "velikost")) %>%
kable_styling(full_width=F, latex_options="hold_position")
kable(table(data$skupina.w), caption = "Velikost skupin pri Ward metodi.",
col.names= c("skupina", "velikost")) %>%
kable_styling(full_width=F, latex_options="hold_position")
kable(table(data$skupina.v), caption = "Velikost skupin pri VEE(BIC).",
col.names= c("skupina", "velikost")) %>%
kable_styling(full_width=F, latex_options="hold_position")
### OPIS LASTNOSTI SKUPIN
# povezanost skupin z ostalimi spremenljivkami
# graficni prikaz
( tabela <- 100*proportions(x=table(data$tip, data$skupina.k), margin=2) )
barplot(height=tabela, legend.text=T, ylim=c(0, 130), args.legend=list(x="top"), las=1)
abline(h=(100*table(data$tip)/nrow(df))[1], col="red")
boxplot(diagonala~skupina.k,data=data, xlab = "skupine", ylab="diagonala")
mx <- aggregate(diagonala ~ skupina.k, data=data, FUN=mean)[, -1]
abline(h=mean(data$diagonala), col="red")
points(x=mx, col="blue", pch="X")
