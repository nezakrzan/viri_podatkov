facet_wrap(vars(var)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("delez zavrnitve") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal() +
theme(legend.position = "bottom")
################################# moc testa ####################################
### enake variance
povp = c("0,1,0", "0,-1,1")
velikost = c(15, 40, 60, 100, 200, 1000)
settings = expand.grid(i=1:st_ponovitev, n = velikost, povp = povp,
var = "1,1,1")
if(file.exists("moc_enake.RDS")){
res_p<-readRDS("moc_enake.RDS")
} else {
res_p<-cbind(settings, pANOVA=NA, pANOVA_2=NA, pMETHOD3=NA)
for(row in 1:nrow(settings)){
# dolocitev velikost skupin, variance, povprecja
velikost = settings$n[row]
var_skupaj = as.numeric(strsplit(as.character(settings$var[row]),",")[[1]])
sd1 = sqrt(var_skupaj[1])
sd2 = sqrt(var_skupaj[2])
sd3 = sqrt(var_skupaj[3])
povp_skupaj = as.numeric(strsplit(as.character(settings$povp[row]),",")[[1]])
povp1 = povp_skupaj[1]
povp2 = povp_skupaj[2]
povp3 = povp_skupaj[3]
# generiranje vzorca
x<-c(rnorm(velikost, povp1, sd1),
rnorm(velikost, povp2, sd2),
rnorm(velikost, povp3, sd3))
gr<-factor(rep(1:3, times=c(velikost,velikost,velikost)))
# classic ANOVA
res_p$pANOVA[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
# Welch's ANOVA
res_p$pANOVA_2[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
# Levene test
p_test_enak_V = leveneTest(x~gr)$`Pr(>F)`[1]
if(p_test_enak_V > 0.05){
res_p$pMETHOD3[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
} else {
res_p$pMETHOD3[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
}
}
# shranjevanje
saveRDS(object = res_p, file="moc_enake.RDS")
}
# risanje moci enake var: Prikaz moči testa v primeru enakih varianc.
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,1,0)", "povprecja = (0,-1,1)")
levels(resLong_P$var) = c("var = (1,1,1)")
valAnal_P = aggregate(power ~ n + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
# graf
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_wrap(vars(povp))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moc") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
################################# moc testa ####################################
### enake variance
povp = c("0,.5,0", "0,-0.5,0.5")
velikost = c(15, 40, 60, 100, 200, 1000)
settings = expand.grid(i=1:st_ponovitev, n = velikost, povp = povp,
var = "1,1,1")
if(file.exists("moc_enake.RDS")){
res_p<-readRDS("moc_enake.RDS")
} else {
res_p<-cbind(settings, pANOVA=NA, pANOVA_2=NA, pMETHOD3=NA)
for(row in 1:nrow(settings)){
# dolocitev velikost skupin, variance, povprecja
velikost = settings$n[row]
var_skupaj = as.numeric(strsplit(as.character(settings$var[row]),",")[[1]])
sd1 = sqrt(var_skupaj[1])
sd2 = sqrt(var_skupaj[2])
sd3 = sqrt(var_skupaj[3])
povp_skupaj = as.numeric(strsplit(as.character(settings$povp[row]),",")[[1]])
povp1 = povp_skupaj[1]
povp2 = povp_skupaj[2]
povp3 = povp_skupaj[3]
# generiranje vzorca
x<-c(rnorm(velikost, povp1, sd1),
rnorm(velikost, povp2, sd2),
rnorm(velikost, povp3, sd3))
gr<-factor(rep(1:3, times=c(velikost,velikost,velikost)))
# classic ANOVA
res_p$pANOVA[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
# Welch's ANOVA
res_p$pANOVA_2[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
# Levene test
p_test_enak_V = leveneTest(x~gr)$`Pr(>F)`[1]
if(p_test_enak_V > 0.05){
res_p$pMETHOD3[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
} else {
res_p$pMETHOD3[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
}
}
# shranjevanje
saveRDS(object = res_p, file="moc_enake.RDS")
}
# risanje moci enake var: Prikaz moči testa v primeru enakih varianc.
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,1,0)", "povprecja = (0,-1,1)")
levels(resLong_P$var) = c("var = (1,1,1)")
# risanje moci enake var: Prikaz moči testa v primeru enakih varianc.
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,1,0)", "povprecja = (0,-1,1)")
levels(resLong_P$var) = c("var = (1,1,1)")
valAnal_P = aggregate(power ~ n + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
# graf
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_wrap(vars(povp))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moc") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
# risanje moci enake var: Prikaz moči testa v primeru enakih varianc.
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,.5,0)", "povprecja = (0,-0.5,0.5)")
levels(resLong_P$var) = c("var = (1,1,1)")
valAnal_P = aggregate(power ~ n + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
# graf
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_wrap(vars(povp))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moc") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
### razlicne variance
settings = expand.grid(i=1:st_ponovitev, n = velikost, povp = povp,
var = c("1,10,1", "1,5,10"))
if(file.exists("moc_razlicne.RDS")){
res_p<-readRDS("moc_razlicne.RDS")
} else {
res_p<-cbind(settings, pANOVA_2=NA, pMETHOD3=NA)
for(row in 1:nrow(settings)){
# dolocitev velikosti skupin, varainc, povprecij
velikost = settings$n[row]
var_skupaj = as.numeric(strsplit(as.character(settings$var[row]),",")[[1]])
sd1 = sqrt(var_skupaj[1])
sd2 = sqrt(var_skupaj[2])
sd3 = sqrt(var_skupaj[3])
povp_skupaj = as.numeric(strsplit(as.character(settings$povp[row]),",")[[1]])
povp1 = povp_skupaj[1]
povp2 = povp_skupaj[2]
povp3 = povp_skupaj[3]
# generiranje vzorca
x<-c(rnorm(velikost, povp1, sd1),
rnorm(velikost, povp2, sd2),
rnorm(velikost, povp3, sd3))
gr<-factor(rep(1:3, times=c(velikost,velikost,velikost)))
# Welch's ANOVA
res_p$pANOVA_2[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
# Levens test
p_test_enak_V = leveneTest(x~gr)$`Pr(>F)`[1]
if(p_test_enak_V > 0.05){
res_p$pMETHOD3[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
} else {
res_p$pMETHOD3[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
}
}
# shranjevanje
saveRDS(object = res_p, file="moc_razlicne.RDS")
}
# risanje moci razlicne var: "Prikaz moči testa v primeru različnih varianc(vrstice predstavljajo varinaco skupin, stolpci pa povprečje posamezne skupine)
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,1,0)", "povprecja = (0,-1,1)")
levels(resLong_P$var) = c("var = (1,10,1)", "var = (1,5,10)")
valAnal_P = aggregate(power ~ n + var + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
# graf
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_grid(var~povp)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moč") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
settings$n
### razlicne variance
velikost = c(15, 40, 60, 100, 200, 1000)
settings = expand.grid(i=1:st_ponovitev, n = velikost, povp = povp,
var = c("1,10,1", "1,5,10"))
settings$n
unique(settings$n)
unique(settings$povp)
### razlicne variance
velikost = c(15, 40, 60, 100, 200, 1000)
settings = expand.grid(i=1:st_ponovitev, n = velikost, povp = povp,
var = c("1,10,1", "1,5,10"))
if(file.exists("moc_razlicne.RDS")){
res_p<-readRDS("moc_razlicne.RDS")
} else {
res_p<-cbind(settings, pANOVA_2=NA, pMETHOD3=NA)
for(row in 1:nrow(settings)){
# dolocitev velikosti skupin, varainc, povprecij
velikost = settings$n[row]
var_skupaj = as.numeric(strsplit(as.character(settings$var[row]),",")[[1]])
sd1 = sqrt(var_skupaj[1])
sd2 = sqrt(var_skupaj[2])
sd3 = sqrt(var_skupaj[3])
povp_skupaj = as.numeric(strsplit(as.character(settings$povp[row]),",")[[1]])
povp1 = povp_skupaj[1]
povp2 = povp_skupaj[2]
povp3 = povp_skupaj[3]
# generiranje vzorca
x<-c(rnorm(velikost, povp1, sd1),
rnorm(velikost, povp2, sd2),
rnorm(velikost, povp3, sd3))
gr<-factor(rep(1:3, times=c(velikost,velikost,velikost)))
# Welch's ANOVA
res_p$pANOVA_2[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
# Levens test
p_test_enak_V = leveneTest(x~gr)$`Pr(>F)`[1]
if(p_test_enak_V > 0.05){
res_p$pMETHOD3[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
} else {
res_p$pMETHOD3[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
}
}
# shranjevanje
saveRDS(object = res_p, file="moc_razlicne.RDS")
}
if(file.exists("moc_razlicne.RDS")){
res_p<-readRDS("moc_razlicne.RDS")
} else {
res_p<-cbind(settings, pANOVA_2=NA, pMETHOD3=NA)
for(row in 1:nrow(settings)){
# dolocitev velikosti skupin, varainc, povprecij
velikost = settings$n[row]
var_skupaj = as.numeric(strsplit(as.character(settings$var[row]),",")[[1]])
sd1 = sqrt(var_skupaj[1])
sd2 = sqrt(var_skupaj[2])
sd3 = sqrt(var_skupaj[3])
povp_skupaj = as.numeric(strsplit(as.character(settings$povp[row]),",")[[1]])
povp1 = povp_skupaj[1]
povp2 = povp_skupaj[2]
povp3 = povp_skupaj[3]
# generiranje vzorca
x<-c(rnorm(velikost, povp1, sd1),
rnorm(velikost, povp2, sd2),
rnorm(velikost, povp3, sd3))
gr<-factor(rep(1:3, times=c(velikost,velikost,velikost)))
# Welch's ANOVA
res_p$pANOVA_2[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
# Levens test
p_test_enak_V = leveneTest(x~gr)$`Pr(>F)`[1]
if(p_test_enak_V > 0.05){
res_p$pMETHOD3[row] = summary(aov(x~gr))[[1]][["Pr(>F)"]][1]
} else {
res_p$pMETHOD3[row] = oneway.test(x~gr, var.equal = FALSE)$p.value
}
}
# shranjevanje
saveRDS(object = res_p, file="moc_razlicne.RDS")
}
# risanje moci razlicne var: "Prikaz moči testa v primeru različnih varianc(vrstice predstavljajo varinaco skupin, stolpci pa povprečje posamezne skupine)
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,0.5,0)", "povprecja = (0,-0.5,0.5)")
levels(resLong_P$var) = c("var = (1,10,1)", "var = (1,5,10)")
valAnal_P = aggregate(power ~ n + var + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
# graf
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_grid(var~povp)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moč") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", fig.pos = "H", message = FALSE, warning = FALSE, results = F, fig.height =3, fig.width = 6.5)
# potrebne knjižnice
library(ggplot2)
library(car)
library(tidyr)
library(ADGofTest)
# seme
set.seed(2024)
generate_data <- function(n, means, vars) {
sample1 <- rnorm(n, mean = means, sd = sqrt(vars[1]))
sample2 <- rnorm(n, mean = means, sd = sqrt(vars[2]))
sample3 <- rnorm(n, mean = means, sd = sqrt(vars[3]))
data = data.frame(sample1 = sample1, sample2 = sample2, sample3 = sample3)
return(data)
}
n = 1000
means = 0
# vars = c("1,1,1", "1,10,1", "1,5,10")
vars = c(1,10,1)
data = generate_data(n, means, vars)
data.long = data.frame(vrednosti = c(data$sample1, data$sample2, data$sample3),
vzorec = c(rep("vzorec 1", n), rep("vzorec 2", n), rep("vzorec 3", n)))
g1 = ggplot(data.long, aes(x = vrednosti, color = vzorec)) +
geom_density(size = 0.5) +
labs(title = "var = (1,10,1)",
x = " ",
y = "density",
color = " ") +
guides(color = guide_legend(nrow = 1, override.aes = list(linetype = 1, shape = 15))) +
theme_minimal()
library(cowplot)
legend <- get_legend(g1)
g1 = g1 + theme(legend.position = "none")
vars = c(1,5,10)
data = generate_data(n, means, vars)
data.long = data.frame(vrednosti = c(data$sample1, data$sample2, data$sample3),
vzorec = c(rep("vzorec 1", n), rep("vzorec 2", n), rep("vzorec 3", n)))
g2 = ggplot(data.long, aes(x = vrednosti, color = vzorec)) +
geom_density(size = 0.5) +
labs(title = "var = (1,5,10)",
x = " ",
y = " ",
color = " ") +
guides(color = guide_legend(override.aes = list(linetype = 1, shape = 15))) +
theme_minimal() +
theme(legend.position = "none")
vars = c(1,1,1)
data = generate_data(n, means, vars)
data.long = data.frame(vrednosti = c(data$sample1, data$sample2, data$sample3),
vzorec = c(rep("vzorec 1", n), rep("vzorec 2", n), rep("vzorec 3", n)))
g3 = ggplot(data.long, aes(x = vrednosti, color = vzorec)) +
geom_density(size = 0.5) +
labs(title = "var = (1,1,1)",
x = " ",
y = " ",
color = " ") +
guides(color = guide_legend(override.aes = list(linetype = 1, shape = 15))) +
theme_minimal()+
theme(legend.position = "none")
library(gridExtra)
combined_plots <- plot_grid(g1, g2, g3, nrow = 1)
plot_grid(combined_plots, legend, ncol = 1, rel_heights = c(1, 0.3))
# ne vem al je bols da je box plot?
# ggplot(data.long, aes(x = vzorec, y = vrednosti, color = vzorec)) +
#  geom_boxplot(size = 0.5) +
#  labs(title = " ",
#       x = " ",
#       y = "density",
#       color = " ") +
#  guides(color = guide_legend(override.aes = list(linetype = 1, shape = 15))) +
#  theme_minimal()
st_ponovitev = 5000
velikost = c(15, 40, 60, 100, 200, 1000)
res = readRDS("p_vrednost.RDS")
# dava v format long
resLong = pivot_longer(res, cols=matches("^p[AM]"), values_to = "pVal",
names_to = "method", names_prefix = "p")
resLong$method[resLong$method == "ANOVA"] = "classic ANOVA"
resLong$method[resLong$method == "ANOVA_2"] = "Welch's ANOVA"
resLong$method[resLong$method == "METHOD3"] = "Levene's test"
levels(resLong$var) = c("var = (1,10,1)", "var = (1,5,10)", "var = (1,1,1)")
valAnal = aggregate(pVal~ n + var + method , data = resLong,
function(x)ad.test(x, distr.fun = punif)$p.value)
valAnal = aggregate(pVal~ n + var + method , data = resLong,
function(x)ad.test(x, distr.fun = punif)$p.value)
valAnal$method[valAnal$method == "ANOVA"] = "classic ANOVA"
valAnal$method[valAnal$method == "ANOVA"] = "classic ANOVA"
valAnal$method[valAnal$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal$method[valAnal$method == "METHOD3"] = "Levene's test"
valAnal$n<-as.factor(valAnal$n)
ggplot(valAnal, aes(y=pVal, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_wrap(vars(var))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("p-vrednost") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal() +
theme(legend.position = "bottom")
valAnal = aggregate(pVal~ n + var + method , data = resLong,
function(x)mean(x<0.05))
valAnal$method[valAnal$method == "ANOVA"] = "classic ANOVA"
valAnal$method[valAnal$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal$method[valAnal$method == "METHOD3"] = "Levene's test"
valAnal$n<-as.factor(valAnal$n)
ggplot(valAnal, aes(y=pVal, col=method, group=method, x=n))+
geom_point()+geom_line()+#geom_smooth(se=F)+
geom_hline(yintercept = 0.05)+
facet_wrap(vars(var)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("delez zavrnitve") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal() +
theme(legend.position = "bottom")
st_ponovitev = 5000
velikost = c(15, 40, 60, 100, 200, 1000)
povp = c("0,0.5,0", "0,-0.5,0.5")
res_p<-readRDS("moc_enake.RDS")
# dava v format long
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povprecja = (0,0.5,0)", "povprecja = (0,-0.5,0.5)")
levels(resLong_P$var) = c("var = (1,1,1)")
valAnal_P = aggregate(power ~ n + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_wrap(vars(povp))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moc") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
res_p<-readRDS("moc_razlicne.RDS")
# dava v format long
resLong_P = pivot_longer(res_p, cols=matches("^p[AM]"), values_to = "power",
names_to = "method", names_prefix = "p")
levels(resLong_P$povp) = c("povp = (0,1,0)", "povp = (0,-1,1)")
levels(resLong_P$var) = c("var = (1,10,1)", "var = (1,5,10)")
# testirava za enakomerno porazdelitev z Anderson-Darling testom
valAnal_P = aggregate(power ~ n + var + method + povp, data = resLong_P,
function(x)mean(x<0.05))
# testirava za enakomerno porazdelitev z Anderson-Darling testom
valAnal_P = aggregate(power ~ n + var + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_grid(var~povp)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moč") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
levels(resLong_P$povp) = c("povp = (0,0.5,0)", "povp = (0,-0.5,0.5)")
levels(resLong_P$var) = c("var = (1,10,1)", "var = (1,5,10)")
# testirava za enakomerno porazdelitev z Anderson-Darling testom
valAnal_P = aggregate(power ~ n + var + method + povp, data = resLong_P,
function(x)mean(x<0.05))
# testirava za enakomerno porazdelitev z Anderson-Darling testom
valAnal_P = aggregate(power ~ n + var + method + povp, data = resLong_P,
function(x)mean(x<0.05))
valAnal_P$method[valAnal_P$method == "ANOVA"] = "classic ANOVA"
valAnal_P$method[valAnal_P$method == "ANOVA_2"] = "Welch's ANOVA"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
valAnal_P$method[valAnal_P$method == "METHOD3"] = "Levene's test"
valAnal_P$n<-as.factor(valAnal_P$n)
ggplot(valAnal_P, aes(y=power, col=method, group=method, x=n))+
geom_point()+geom_line()+
geom_hline(yintercept = 0.05)+
facet_grid(var~povp)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
ylab("moč") +
xlab("velikost skupin(n)") +
labs(title = " ",
color = " ") +
theme_minimal()
